#!/usr/bin/env python3
"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Claude Code
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–ø–ª–æ–µ–º —á–µ—Ä–µ–∑ Portainer API
"""

import subprocess
import sys
import json
import time
from typing import Dict, Any

def run_portainer_command(command: str) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É portainer_deploy.py –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        result = subprocess.run(
            [sys.executable, "portainer_deploy.py", command],
            capture_output=True,
            text=True,
            cwd="/home/coder/Desktop/2202/Textill_PRO_BOT"
        )
        
        return {
            "success": result.returncode == 0,
            "stdout": result.stdout,
            "stderr": result.stderr,
            "command": command
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "command": command
        }

def deploy_bot() -> str:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π –±–æ—Ç–∞"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –±–æ—Ç–∞...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
    status_result = run_portainer_command("status")
    
    if status_result["success"]:
        print("‚úÖ –°–≤—è–∑—å —Å Portainer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        try:
            status_data = json.loads(status_result["stdout"])
            if status_data.get("containers"):
                print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(status_data['containers'])}")
        except:
            pass
    else:
        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–µ–∫ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω")
    
    # 2. –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ Git
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    update_result = run_portainer_command("update")
    
    if update_result["success"]:
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ Git –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    else:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–µ–∫...")
        create_result = run_portainer_command("create")
        if create_result["success"]:
            print("‚úÖ –ù–æ–≤—ã–π —Å—Ç–µ–∫ —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–µ–∫–∞:", create_result.get("stderr", ""))
            return "‚ùå –î–µ–ø–ª–æ–π –Ω–µ —É–¥–∞–ª—Å—è"
    
    # 3. –ü–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    time.sleep(10)
    
    final_status = run_portainer_command("status")
    if final_status["success"]:
        try:
            status_data = json.loads(final_status["stdout"])
            containers = status_data.get("containers", [])
            running_containers = [c for c in containers if "running" in c.get("state", "").lower()]
            
            if running_containers:
                print(f"‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –ó–∞–ø—É—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(running_containers)}")
                print("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ: @textilprofi_bot")
                return "‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
            else:
                print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏...")
                logs_result = run_portainer_command("logs")
                if logs_result["success"]:
                    print("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
                    print(logs_result["stdout"][-500:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                return "‚ö†Ô∏è –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return "‚ö†Ô∏è –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ—è—Å–µ–Ω"
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        return "‚ö†Ô∏è –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ—è—Å–µ–Ω"

def check_bot_status() -> str:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞...")
    
    result = run_portainer_command("status")
    
    if not result["success"]:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Portainer: {result.get('stderr', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    try:
        status_data = json.loads(result["stdout"])
        
        if "error" in status_data:
            return f"‚ùå {status_data['error']}"
        
        containers = status_data.get("containers", [])
        if not containers:
            return "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–µ–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω."
        
        status_info = []
        status_info.append(f"üì¶ –°—Ç–µ–∫: {status_data.get('stack_name', 'unknown')}")
        status_info.append(f"üÜî ID: {status_data.get('stack_id', 'unknown')}")
        status_info.append(f"üìä –°—Ç–∞—Ç—É—Å —Å—Ç–µ–∫–∞: {status_data.get('status', 'unknown')}")
        status_info.append("")
        
        for container in containers:
            name = container.get("name", "unknown")
            state = container.get("state", "unknown")
            status = container.get("status", "unknown")
            
            if "running" in state.lower():
                emoji = "‚úÖ"
            elif "exited" in state.lower():
                emoji = "‚ùå"
            else:
                emoji = "‚ö†Ô∏è"
            
            status_info.append(f"{emoji} {name}: {state} ({status})")
        
        return "\n".join(status_info)
    
    except json.JSONDecodeError:
        return f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:\n{result['stdout'][:200]}..."
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}"

def show_bot_logs() -> str:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"""
    print("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –±–æ—Ç–∞...")
    
    result = run_portainer_command("logs")
    
    if not result["success"]:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {result.get('stderr', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    
    logs = result["stdout"]
    if not logs.strip():
        return "üìù –õ–æ–≥–∏ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –ª–æ–≥–æ–≤
    return f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞:\n\n{logs[-1000:]}"

def restart_bot() -> str:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    result = run_portainer_command("restart")
    
    if result["success"]:
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
        time.sleep(15)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        status = check_bot_status()
        return f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω\n\n{status}"
    else:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {result.get('stderr', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Claude Code
def execute_claude_command(command: str) -> str:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ—Ç Claude Code"""
    
    command = command.lower().strip()
    
    if command in ["deploy", "–¥–µ–ø–ª–æ–π", "–æ–±–Ω–æ–≤–∏", "update"]:
        return deploy_bot()
    
    elif command in ["status", "—Å—Ç–∞—Ç—É—Å", "–ø—Ä–æ–≤–µ—Ä—å"]:
        return check_bot_status()
    
    elif command in ["logs", "–ª–æ–≥–∏", "–ø–æ–∫–∞–∂–∏ –ª–æ–≥–∏"]:
        return show_bot_logs()
    
    elif command in ["restart", "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫", "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏"]:
        return restart_bot()
    
    else:
        return f"""‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
üöÄ deploy/–¥–µ–ø–ª–æ–π - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–ø–ª–æ–π
üìä status/—Å—Ç–∞—Ç—É—Å - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å  
üìù logs/–ª–æ–≥–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
üîÑ restart/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""

if __name__ == "__main__":
    if len(sys.argv) > 1:
        command = " ".join(sys.argv[1:])
        result = execute_claude_command(command)
        print(result)
    else:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python claude_commands.py <–∫–æ–º–∞–Ω–¥–∞>")
        print("–ü—Ä–∏–º–µ—Ä: python claude_commands.py deploy")