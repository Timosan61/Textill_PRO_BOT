import streamlit as st
import git
import os
import requests
from datetime import datetime
from typing import Optional, Dict, Any

class DeployManager:
    def __init__(self):
        self.repo_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        self.railway_token = st.secrets.get("RAILWAY_TOKEN", os.getenv("RAILWAY_TOKEN"))
        self.railway_project_id = st.secrets.get("RAILWAY_PROJECT_ID", os.getenv("RAILWAY_PROJECT_ID"))
        self.railway_service_id = st.secrets.get("RAILWAY_SERVICE_ID", os.getenv("RAILWAY_SERVICE_ID"))
        
    def get_git_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            repo = git.Repo(self.repo_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ uncommitted –∏–∑–º–µ–Ω–µ–Ω–∏—è
            is_dirty = repo.is_dirty()
            untracked_files = repo.untracked_files
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
            last_commit = repo.head.commit
            
            return {
                "is_dirty": is_dirty,
                "untracked_files": untracked_files,
                "last_commit_sha": last_commit.hexsha[:8],
                "last_commit_message": last_commit.message.strip(),
                "last_commit_date": datetime.fromtimestamp(last_commit.committed_date),
                "current_branch": repo.active_branch.name,
                "status": "clean" if not is_dirty and not untracked_files else "dirty"
            }
        except Exception as e:
            return {"error": str(e)}
    
    def commit_and_push_changes(self, commit_message: str) -> bool:
        """–ö–æ–º–º–∏—Ç–∏—Ç –∏ –ø—É—à–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub"""
        try:
            repo = git.Repo(self.repo_path)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            repo.git.add('data/instruction.json')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∫–æ–º–º–∏—Ç–∏—Ç—å
            if not repo.is_dirty():
                st.info("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
                return True
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
            repo.index.commit(commit_message)
            
            # –ü—É—à–∏–º –≤ remote
            origin = repo.remote(name='origin')
            origin.push()
            
            return True
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Git: {e}")
            return False
    
    def trigger_railway_deploy(self) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–ø–ª–æ–π –Ω–∞ Railway —á–µ—Ä–µ–∑ API"""
        try:
            headers = {
                "Authorization": f"Bearer {self.railway_token}",
                "Content-Type": "application/json"
            }
            
            # GraphQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–µ–ø–ª–æ—è
            query = """
            mutation {
                serviceInstanceRedeploy(
                    serviceId: "%s"
                ) {
                    id
                }
            }
            """ % self.railway_service_id
            
            response = requests.post(
                "https://backboard.railway.com/graphql/v2",
                headers=headers,
                json={"query": query}
            )
            
            if response.status_code == 200:
                result = response.json()
                if "errors" not in result:
                    return True
                else:
                    st.error(f"–û—à–∏–±–∫–∞ Railway API: {result['errors']}")
                    return False
            else:
                st.error(f"–û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                return False
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Railway API: {e}")
            return False
    
    def auto_deploy_changes(self, commit_message: str) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π: –∫–æ–º–º–∏—Ç + –ø—É—à + —Ä–µ–¥–µ–ø–ª–æ–π"""
        
        with st.spinner("–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Git..."):
            if not self.commit_and_push_changes(commit_message):
                return False
        
        st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
        
        # Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç—è–Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –º–æ–∂–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
        with st.spinner("–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–∞ Railway..."):
            if self.trigger_railway_deploy():
                st.success("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway")
                st.info("üöÄ –ò–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–∏–Ω—É—Ç")
                return True
            else:
                st.warning("‚ö†Ô∏è –î–µ–ø–ª–æ–π –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                return False

def show_deploy_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üöÄ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è")
    
    deploy_manager = DeployManager()
    git_status = deploy_manager.get_git_status()
    
    if "error" in git_status:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ Git: {git_status['error']}")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å Git
    if git_status["status"] == "clean":
        st.sidebar.success("‚úÖ Git: –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    else:
        st.sidebar.warning("‚ö†Ô∏è Git: –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
    st.sidebar.info(f"""
    **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:**
    `{git_status['last_commit_sha']}`
    
    **–°–æ–æ–±—â–µ–Ω–∏–µ:**
    {git_status['last_commit_message'][:50]}...
    
    **–î–∞—Ç–∞:**
    {git_status['last_commit_date'].strftime('%d.%m.%Y %H:%M')}
    """)
    
    return deploy_manager