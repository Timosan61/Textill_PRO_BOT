"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram Business API —Å–æ–±—ã—Ç–∏–π
"""

import logging
from telebot import types
from .handlers import bot
from .agent import process_message_with_ai

logger = logging.getLogger(__name__)

async def handle_business_update(update: types.Update):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Business API —Å–æ–±—ã—Ç–∏–π
    """
    try:
        if hasattr(update, 'business_connection'):
            await handle_business_connection(update.business_connection)
        
        elif hasattr(update, 'business_message'):
            await handle_business_message(update.business_message)
            
        elif hasattr(update, 'edited_business_message'):
            await handle_edited_business_message(update.edited_business_message)
            
        elif hasattr(update, 'deleted_business_messages'):
            await handle_deleted_business_messages(update.deleted_business_messages)
            
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø business update: {type(update)}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business update: {e}")

async def handle_business_connection(business_connection):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    logger.info(f"Business connection: {business_connection.id} - {business_connection.is_enabled}")
    
    if business_connection.is_enabled:
        logger.info(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ business –∞–∫–∫–∞—É–Ω—Ç—É: {business_connection.user.first_name}")
    else:
        logger.info(f"‚ùå –ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç business –∞–∫–∫–∞—É–Ω—Ç–∞: {business_connection.user.first_name}")

async def handle_business_message(business_message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç business –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        logger.info(f"üì® Business —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {business_message.from_user.first_name}: {business_message.text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ (–∏–∑–±–µ–≥–∞–µ–º –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è)
        if business_message.from_user.is_bot:
            logger.debug("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
            return
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if business_message.text:
            response = await process_message_with_ai(
                user_id=business_message.from_user.id,
                message_text=business_message.text,
                username=business_message.from_user.username or business_message.from_user.first_name
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ business API
            bot.send_message(
                chat_id=business_message.chat.id,
                text=response,
                business_connection_id=business_message.business_connection_id
            )
            
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ business API")
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        elif business_message.photo:
            await handle_business_photo(business_message)
        elif business_message.document:
            await handle_business_document(business_message)
        else:
            logger.info("–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø business —Å–æ–æ–±—â–µ–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_business_photo(business_message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç business –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        logger.info(f"üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –≤ business —á–∞—Ç–µ")
        
        response = "üì∑ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! –Ø –≤–∏–∂—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º."
        
        bot.send_message(
            chat_id=business_message.chat.id,
            text=response,
            business_connection_id=business_message.business_connection_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business —Ñ–æ—Ç–æ: {e}")

async def handle_business_document(business_message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç business –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    try:
        logger.info(f"üìÑ –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ business —á–∞—Ç–µ")
        
        response = "üìÑ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç! –Ø –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã, –Ω–æ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
        
        bot.send_message(
            chat_id=business_message.chat.id,
            text=response,
            business_connection_id=business_message.business_connection_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ business –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

async def handle_edited_business_message(edited_message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö business —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    logger.info(f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ business —Å–æ–æ–±—â–µ–Ω–∏–µ: {edited_message.text}")
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏

async def handle_deleted_business_messages(deleted_messages):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö business —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã business —Å–æ–æ–±—â–µ–Ω–∏—è: {len(deleted_messages.message_ids)} —à—Ç.")
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏