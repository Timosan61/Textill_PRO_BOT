import asyncio
import logging
from telebot.async_telebot import AsyncTeleBot
from telebot import types

from .agent import agent
from .config import TELEGRAM_BOT_TOKEN


bot = AsyncTeleBot(TELEGRAM_BOT_TOKEN)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@bot.message_handler(commands=['start'])
async def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = agent.get_welcome_message()
    
    await bot.send_message(
        message.chat.id, 
        welcome_text,
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['help'])
async def help_command(message):
    help_text = """
üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
üîπ /reload - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
    """
    
    await bot.send_message(
        message.chat.id,
        help_text,
        parse_mode='Markdown'
    )


@bot.message_handler(commands=['reload'])
async def reload_command(message):
    user_id = message.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    
    try:
        agent.reload_instruction()
        await bot.send_message(
            message.chat.id,
            "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
        )
        logger.info("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        await bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")


@bot.message_handler(content_types=['text'])
async def handle_text_message(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_message = message.text
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} ({user_id}): {user_message[:100]}...")
    
    try:
        await bot.send_chat_action(message.chat.id, 'typing')
        
        session_id = f"user_{user_id}"
        
        response = await agent.generate_response(user_message, session_id)
        
        await bot.send_message(
            message.chat.id,
            response,
            parse_mode='Markdown'
        )
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.",
            parse_mode='Markdown'
        )


@bot.message_handler(content_types=['photo', 'document', 'voice', 'video', 'audio'])
async def handle_media_message(message):
    user_id = message.from_user.id
    
    logger.info(f"–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    await bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª! –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏. "
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É! üìù"
    )


async def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await bot.infinity_polling()