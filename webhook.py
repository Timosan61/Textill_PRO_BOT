"""
ü§ñ Telegram Business Bot Webhook Server
–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –ë–ï–ó polling —Ä–µ–∂–∏–º–∞!
Updated: 2025-06-19 10:00 - Added GET endpoint for webhook/set
"""

import os
import logging
from fastapi import FastAPI, Request, HTTPException
import telebot
import json

print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ Telegram Business Bot Webhook Server...")

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "textil_pro_secret_2025")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

print(f"‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {TELEGRAM_BOT_TOKEN[:20]}...")

# === –°–û–ó–î–ê–ù–ò–ï –°–ò–ù–•–†–û–ù–ù–û–ì–û –ë–û–¢–ê (–ù–ï ASYNC!) ===
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
app = FastAPI(
    title="ü§ñ Telegram Business Bot", 
    description="Webhook-only —Ä–µ–∂–∏–º –¥–ª—è Telegram Business API"
)

@app.get("/")
async def health_check():
    """Health check endpoint"""
    try:
        bot_info = bot.get_me()
        return {
            "status": "üü¢ ONLINE", 
            "service": "Telegram Business Bot Webhook",
            "bot": f"@{bot_info.username}",
            "bot_id": bot_info.id,
            "mode": "WEBHOOK_ONLY",
            "endpoints": {
                "webhook_info": "/webhook/info",
                "set_webhook": "/webhook/set",
                "delete_webhook": "/webhook (DELETE method)"
            },
            "hint": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /webhook/set –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook"
        }
    except Exception as e:
        return {"status": "üî¥ ERROR", "error": str(e)}

@app.get("/webhook/info")
async def webhook_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook"""
    try:
        info = bot.get_webhook_info()
        return {
            "webhook_url": info.url or "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "pending_updates": info.pending_update_count,
            "last_error": info.last_error_message or "‚úÖ –ù–µ—Ç –æ—à–∏–±–æ–∫",
            "has_custom_certificate": info.has_custom_certificate,
            "allowed_updates": info.allowed_updates or ["–≤—Å–µ"]
        }
    except Exception as e:
        return {"error": str(e)}

@app.get("/webhook/set")
async def set_webhook_get():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —á–µ—Ä–µ–∑ GET (–¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞)"""
    return await set_webhook()

@app.post("/webhook/set")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook"""
    try:
        webhook_url = "https://bot-production-472c.up.railway.app/webhook"
        
        result = bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET_TOKEN,
            allowed_updates=[
                "message",
                "business_connection", 
                "business_message",
                "edited_business_message",
                "deleted_business_messages"
            ]
        )
        
        if result:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return {
                "status": "‚úÖ SUCCESS",
                "webhook_url": webhook_url,
                "secret_token": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω",
                "allowed_updates": "‚úÖ Business API –≤–∫–ª—é—á–µ–Ω"
            }
        else:
            return {"status": "‚ùå FAILED"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.delete("/webhook")
async def delete_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ webhook"""
    try:
        result = bot.delete_webhook()
        return {"status": "‚úÖ Webhook —É–¥–∞–ª–µ–Ω" if result else "‚ùå –û—à–∏–±–∫–∞"}
    except Exception as e:
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.post("/webhook")
async def process_webhook(request: Request):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook"""
    try:
        json_data = await request.body()
        json_string = json_data.decode('utf-8')
        
        logger.info(f"üì® Webhook –ø–æ–ª—É—á–µ–Ω: {json_string[:150]}...")
        
        update_dict = json.loads(json_string)
        
        # === –û–ë–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
        if "message" in update_dict:
            msg = update_dict["message"]
            chat_id = msg["chat"]["id"]
            text = msg.get("text", "")
            user_name = msg.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            if text.startswith("/start"):
                response = f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø Textil PRO –±–æ—Ç.\n\n‚úÖ –†–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ webhook\nüíº –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é Business API\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
            elif text.startswith("/help"):
                response = "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n/start - –Ω–∞—á–∞—Ç—å\n/help - –ø–æ–º–æ—â—å\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ —è –æ—Ç–≤–µ—á—É!"
            elif text:
                response = f"üí¨ {user_name}, –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\nü§ñ –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AI –æ—Ç–≤–µ—Ç!"
            else:
                response = "üìé –°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∞–π–ª! –ü–æ–∫–∞ —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º."
                
            bot.send_message(chat_id, response)
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        
        # === BUSINESS –°–û–û–ë–©–ï–ù–ò–Ø ===
        elif "business_message" in update_dict:
            bus_msg = update_dict["business_message"]
            chat_id = bus_msg["chat"]["id"]
            text = bus_msg.get("text", "")
            business_connection_id = bus_msg.get("business_connection_id")
            user_name = bus_msg.get("from", {}).get("first_name", "–ö–ª–∏–µ–Ω—Ç")
            
            if text and business_connection_id:
                response = f"üíº –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Business API: {text}\n\nü§ñ –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç!"
                bot.send_message(
                    chat_id=chat_id,
                    text=response,
                    business_connection_id=business_connection_id
                )
                logger.info(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        
        # === BUSINESS CONNECTION ===
        elif "business_connection" in update_dict:
            conn = update_dict["business_connection"]
            is_enabled = conn.get("is_enabled", False)
            user_name = conn.get("user", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            logger.info(f"{status} –∫ Business –∞–∫–∫–∞—É–Ω—Ç—É: {user_name}")
        
        return {"ok": True, "status": "processed"}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.on_event("startup")
async def startup():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n" + "="*50)
    print("üöÄ TELEGRAM BUSINESS BOT WEBHOOK SERVER")
    print("="*50)
    
    # –û—á–∏—â–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        bot.delete_webhook()
        print("üßπ Webhook –æ—á–∏—â–µ–Ω")
    except:
        pass
    
    try:
        bot_info = bot.get_me()
        print(f"ü§ñ –ë–æ—Ç: @{bot_info.username}")
        print(f"üìä ID: {bot_info.id}")
        print(f"üìõ –ò–º—è: {bot_info.first_name}")
        print("üîó –†–µ–∂–∏–º: WEBHOOK ONLY")
        print("‚ùå Polling: –û–¢–ö–õ–Æ–ß–ï–ù")
        print("="*50)
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        if os.getenv("AUTO_SET_WEBHOOK", "false").lower() == "true":
            print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook...")
            await set_webhook()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

@app.on_event("shutdown")
async def shutdown():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Business Bot Webhook Server")
    print("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    print(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)