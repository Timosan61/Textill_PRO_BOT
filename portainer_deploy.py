#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ Portainer API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–∫–∞ textil-pro-bot
"""

import requests
import json
import time
import sys
from typing import Dict, Any, Optional

class PortainerAPI:
    def __init__(self, base_url: str, api_key: str):
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.headers = {
            'X-API-Key': api_key,
            'Content-Type': 'application/json'
        }
    
    def get_endpoints(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        response = requests.get(f"{self.base_url}/api/endpoints", headers=self.headers)
        response.raise_for_status()
        return response.json()
    
    def get_stacks(self, endpoint_id: int = 2) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–∫–æ–≤"""
        response = requests.get(
            f"{self.base_url}/api/stacks",
            headers=self.headers,
            params={'endpointId': endpoint_id}
        )
        response.raise_for_status()
        return response.json()
    
    def find_stack_by_name(self, name: str, endpoint_id: int = 2) -> Optional[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ —Å—Ç–µ–∫ –ø–æ –∏–º–µ–Ω–∏"""
        stacks = self.get_stacks(endpoint_id)
        for stack in stacks:
            if stack['Name'] == name:
                return stack
        return None
    
    def create_stack_from_git(self, 
                            stack_name: str,
                            repository_url: str,
                            compose_file: str = "docker-compose.yaml",
                            repository_reference: str = "refs/heads/main",
                            auto_update: bool = True,
                            env_vars: Dict[str, str] = None,
                            endpoint_id: int = 2) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç–µ–∫ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        
        payload = {
            "name": stack_name,
            "repositoryURL": repository_url,
            "repositoryReferenceName": repository_reference,
            "composeFile": compose_file,
            "autoUpdate": {
                "interval": "5m" if auto_update else "",
                "webhook": ""
            },
            "env": [{"name": k, "value": v} for k, v in (env_vars or {}).items()]
        }
        
        response = requests.post(
            f"{self.base_url}/api/stacks",
            headers=self.headers,
            params={'type': 2, 'method': 'repository', 'endpointId': endpoint_id},
            json=payload
        )
        response.raise_for_status()
        return response.json()
    
    def update_stack(self, stack_id: int, endpoint_id: int = 2) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–µ–∫ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ Git)"""
        
        response = requests.put(
            f"{self.base_url}/api/stacks/{stack_id}",
            headers=self.headers,
            params={'endpointId': endpoint_id},
            json={"pullImage": True}
        )
        response.raise_for_status()
        return response.json()
    
    def restart_stack(self, stack_id: int, endpoint_id: int = 2) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ —Å—Ç–µ–∫–µ"""
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–∫
        stop_response = requests.post(
            f"{self.base_url}/api/stacks/{stack_id}/stop",
            headers=self.headers,
            params={'endpointId': endpoint_id}
        )
        stop_response.raise_for_status()
        
        time.sleep(3)  # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
        start_response = requests.post(
            f"{self.base_url}/api/stacks/{stack_id}/start",
            headers=self.headers,
            params={'endpointId': endpoint_id}
        )
        start_response.raise_for_status()
        
        return True
    
    def get_stack_logs(self, stack_name: str, lines: int = 50, endpoint_id: int = 2) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å—Ç–µ–∫–∞"""
        stack = self.find_stack_by_name(stack_name, endpoint_id)
        if not stack:
            return f"–°—Ç–µ–∫ {stack_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—Ç–µ–∫–∞
        containers_response = requests.get(
            f"{self.base_url}/api/endpoints/{endpoint_id}/docker/containers/json",
            headers=self.headers,
            params={'filters': json.dumps({'label': [f'com.docker.compose.project={stack_name}']})}
        )
        containers_response.raise_for_status()
        containers = containers_response.json()
        
        logs = []
        for container in containers:
            container_id = container['Id']
            container_name = container['Names'][0].lstrip('/')
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            logs_response = requests.get(
                f"{self.base_url}/api/endpoints/{endpoint_id}/docker/containers/{container_id}/logs",
                headers=self.headers,
                params={
                    'stdout': 1,
                    'stderr': 1,
                    'tail': lines,
                    'timestamps': 1
                }
            )
            
            if logs_response.status_code == 200:
                logs.append(f"=== {container_name} ===")
                logs.append(logs_response.text)
                logs.append("")
        
        return "\n".join(logs)
    
    def get_stack_status(self, stack_name: str, endpoint_id: int = 2) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç–µ–∫–∞"""
        stack = self.find_stack_by_name(stack_name, endpoint_id)
        if not stack:
            return {"error": f"–°—Ç–µ–∫ {stack_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—Ç–µ–∫–∞
        containers_response = requests.get(
            f"{self.base_url}/api/endpoints/{endpoint_id}/docker/containers/json",
            headers=self.headers,
            params={'all': True, 'filters': json.dumps({'label': [f'com.docker.compose.project={stack_name}']})}
        )
        containers_response.raise_for_status()
        containers = containers_response.json()
        
        status = {
            "stack_id": stack['Id'],
            "stack_name": stack_name,
            "status": stack.get('Status', 'unknown'),
            "containers": []
        }
        
        for container in containers:
            status["containers"].append({
                "name": container['Names'][0].lstrip('/'),
                "state": container['State'],
                "status": container['Status'],
                "image": container['Image']
            })
        
        return status

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–µ–ø–ª–æ—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    PORTAINER_URL = "http://185.135.83.197:9000"
    API_KEY = "ptr_W0/YcW+mOfXDut1onRvf7lYpOGn6yhHKu+5K/DrZt9Q="
    STACK_NAME = "textil-pro-bot"
    REPOSITORY_URL = "https://github.com/Timosan61/Textill_PRO_BOT.git"
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–µ–∫–∞
    ENV_VARS = {
        "TELEGRAM_BOT_TOKEN": "7902755829:AAH-WUhXSYq8NckAjFb22E-4D1O7ix_kzPM",
        "OPENAI_API_KEY": "test_key",
        "ZEP_API_KEY": "test_key",
        "BOT_USERNAME": "@textilprofi_bot"
    }
    
    portainer = PortainerAPI(PORTAINER_URL, API_KEY)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python portainer_deploy.py status     - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  python portainer_deploy.py logs       - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
        print("  python portainer_deploy.py update     - –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ Git")
        print("  python portainer_deploy.py restart    - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
        print("  python portainer_deploy.py create     - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–µ–∫")
        return
    
    command = sys.argv[1].lower()
    
    try:
        if command == "status":
            print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–µ–∫–∞...")
            status = portainer.get_stack_status(STACK_NAME)
            print(json.dumps(status, indent=2, ensure_ascii=False))
        
        elif command == "logs":
            print("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤...")
            logs = portainer.get_stack_logs(STACK_NAME, lines=30)
            print(logs)
        
        elif command == "update":
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–∫–∞ –∏–∑ Git...")
            stack = portainer.find_stack_by_name(STACK_NAME)
            if stack:
                result = portainer.update_stack(stack['Id'])
                print("‚úÖ –°—Ç–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω:", result)
            else:
                print("‚ùå –°—Ç–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        elif command == "restart":
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ç–µ–∫–∞...")
            stack = portainer.find_stack_by_name(STACK_NAME)
            if stack:
                portainer.restart_stack(stack['Id'])
                print("‚úÖ –°—Ç–µ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            else:
                print("‚ùå –°—Ç–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        elif command == "create":
            print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–µ–∫–∞...")
            result = portainer.create_stack_from_git(
                STACK_NAME, 
                REPOSITORY_URL,
                env_vars=ENV_VARS,
                auto_update=True
            )
            print("‚úÖ –°—Ç–µ–∫ —Å–æ–∑–¥–∞–Ω:", result)
        
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
    
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()