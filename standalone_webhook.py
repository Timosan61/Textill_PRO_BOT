"""
Standalone webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è Telegram Business API
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
"""

import os
import logging
from fastapi import FastAPI, Request, HTTPException
import telebot
import json

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN", "textil_pro_secret_2025")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# === –°–û–ó–î–ê–ù–ò–ï –ë–û–¢–ê ===
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === FASTAPI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ===
app = FastAPI(title="Standalone Telegram Webhook")

@app.get("/")
async def health_check():
    """Health check endpoint"""
    try:
        bot_info = bot.get_me()
        return {
            "status": "‚úÖ OK",
            "service": "Standalone Telegram Webhook",
            "bot": f"@{bot_info.username}",
            "bot_id": bot_info.id
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "‚ùå ERROR", 
            "error": str(e)
        }

@app.get("/webhook/info")
async def webhook_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook"""
    try:
        info = bot.get_webhook_info()
        return {
            "webhook_url": info.url or "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            "pending_updates": info.pending_update_count,
            "last_error": info.last_error_message or "–ù–µ—Ç –æ—à–∏–±–æ–∫",
            "has_custom_certificate": info.has_custom_certificate,
            "allowed_updates": info.allowed_updates
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info: {e}")
        return {"error": str(e)}

@app.post("/webhook/set")
async def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è webhook
        webhook_url = "https://bot-production-472c.up.railway.app/webhook"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        result = bot.set_webhook(
            url=webhook_url,
            secret_token=WEBHOOK_SECRET_TOKEN,
            allowed_updates=[
                "message", 
                "business_connection",
                "business_message"
            ]
        )
        
        if result:
            logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            return {
                "status": "‚úÖ SUCCESS",
                "webhook_url": webhook_url,
                "secret_token": "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω"
            }
        else:
            return {"status": "‚ùå FAILED", "error": "set_webhook returned False"}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.delete("/webhook")
async def delete_webhook():
    """–£–¥–∞–ª–∏—Ç—å webhook"""
    try:
        result = bot.delete_webhook()
        if result:
            logger.info("‚úÖ Webhook —É–¥–∞–ª–µ–Ω")
            return {"status": "‚úÖ Webhook —É–¥–∞–ª–µ–Ω"}
        else:
            return {"status": "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook: {e}")
        return {"status": "‚ùå ERROR", "error": str(e)}

@app.post("/webhook")
async def process_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        json_data = await request.body()
        json_string = json_data.decode('utf-8')
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {json_string[:100]}...")
        
        # –ü–∞—Ä—Å–∏–º update
        update_dict = json.loads(json_string)
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê –û–ë–´–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ===
        if "message" in update_dict:
            message = update_dict["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            user_name = message.get("from", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            if text:
                response = f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}"
                bot.send_message(chat_id, response)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª –≤ —á–∞—Ç {chat_id}")
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê BUSINESS –°–û–û–ë–©–ï–ù–ò–ô ===
        elif "business_message" in update_dict:
            bus_msg = update_dict["business_message"]
            chat_id = bus_msg["chat"]["id"]
            text = bus_msg.get("text", "")
            business_connection_id = bus_msg.get("business_connection_id")
            user_name = bus_msg.get("from", {}).get("first_name", "–ö–ª–∏–µ–Ω—Ç")
            
            if text and business_connection_id:
                response = f"üíº –ü—Ä–∏–≤–µ—Ç, {user_name}! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Business API: {text}"
                bot.send_message(
                    chat_id=chat_id,
                    text=response,
                    business_connection_id=business_connection_id
                )
                logger.info(f"‚úÖ Business –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        
        # === –û–ë–†–ê–ë–û–¢–ö–ê BUSINESS CONNECTION ===
        elif "business_connection" in update_dict:
            connection = update_dict["business_connection"]
            is_enabled = connection.get("is_enabled", False)
            user_name = connection.get("user", {}).get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            if is_enabled:
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Business –∞–∫–∫–∞—É–Ω—Ç—É: {user_name}")
            else:
                logger.info(f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Business –∞–∫–∫–∞—É–Ω—Ç–∞: {user_name}")
        
        return {"ok": True}
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.on_event("startup")
async def startup():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Standalone Telegram Webhook Server")
    
    # –£–¥–∞–ª—è–µ–º webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try:
        bot.delete_webhook()
        logger.info("üßπ Webhook –æ—á–∏—â–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    except:
        pass
    
    try:
        bot_info = bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤: @{bot_info.username} ({bot_info.first_name})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

@app.on_event("shutdown") 
async def shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Standalone Webhook Server")

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    uvicorn.run(app, host="0.0.0.0", port=port)